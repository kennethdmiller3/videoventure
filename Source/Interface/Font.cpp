#include "StdAfx.h"
#include "Texture.h"

static const int FIRST_CHARACTER = '\x00';
static const int LAST_CHARACTER  = '\x7F';

Rect<float> sDefaultFontUVs[LAST_CHARACTER-FIRST_CHARACTER+1];

GLuint sDefaultFontHandle;

// default font identifier
static const unsigned int aDefaultFontId = 0x7bd2c61f /* "defaultfont" */;

// modified Atari 8-bit font
// TO DO: support other fonts
static const int aTextureComponents = 1;
static const size_t aTextureWidth = 128;
static const size_t aTextureHeight = 64;
static const unsigned char aTextureData[] = 
{
	0x00, 0x18, 0xc0, 0x18, 0x18, 0x00, 0xc0, 0x03, 0x80, 0x00, 0x01, 0xf0, 0x0f, 0xff, 0x00, 0x00, 
	0x6c, 0x18, 0xc0, 0x18, 0x18, 0x00, 0xe0, 0x07, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xff, 0x00, 0x00, 
	0xfe, 0x18, 0xc0, 0x18, 0x18, 0x00, 0x70, 0x0e, 0xe0, 0x00, 0x07, 0xf0, 0x0f, 0x00, 0x00, 0x00, 
	0xfe, 0xf8, 0xc0, 0x1f, 0x1f, 0x1f, 0x38, 0x1c, 0xf0, 0x00, 0x0f, 0xf0, 0x0f, 0x00, 0x00, 0x00, 
	0x7c, 0xf8, 0xc0, 0x1f, 0x1f, 0x1f, 0x1c, 0x38, 0xf8, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0x38, 0x18, 0xc0, 0x00, 0x18, 0x18, 0x0e, 0x70, 0xfc, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0x10, 0x18, 0xc0, 0x00, 0x18, 0x18, 0x07, 0xe0, 0xfe, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0xff, 0x0f, 
	0x00, 0x18, 0xc0, 0x00, 0x18, 0x18, 0x03, 0xc0, 0xff, 0xf0, 0xff, 0x00, 0x00, 0x00, 0xff, 0x0f, 
	0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0x00, 0x18, 0x0f, 0x18, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x38, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0x00, 0x18, 0x0f, 0x18, 0x06, 0x18, 0x18, 0x18, 0x18, 
	0x38, 0x00, 0x00, 0x18, 0x3c, 0x00, 0x03, 0x00, 0x18, 0x0f, 0x18, 0x1e, 0x3c, 0x18, 0x0c, 0x30, 
	0xee, 0xf8, 0xff, 0xff, 0x7e, 0x00, 0x03, 0xff, 0xff, 0x0f, 0xf8, 0x06, 0x7e, 0x18, 0x7e, 0x7e, 
	0xee, 0xf8, 0xff, 0xff, 0x7e, 0xff, 0x03, 0xff, 0xff, 0x0f, 0xf8, 0x7e, 0x18, 0x7e, 0x0c, 0x30, 
	0x10, 0x18, 0x00, 0x18, 0x7e, 0xff, 0x03, 0x18, 0x00, 0x0f, 0x00, 0x18, 0x18, 0x3c, 0x18, 0x18, 
	0x38, 0x18, 0x00, 0x18, 0x3c, 0xff, 0x03, 0x18, 0x00, 0x0f, 0x00, 0x78, 0x18, 0x18, 0x00, 0x00, 
	0x00, 0x18, 0x00, 0x18, 0x00, 0xff, 0x03, 0x18, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x66, 0x66, 0x7c, 0x66, 0x6c, 0x18, 0x70, 0x0e, 0x66, 0x18, 0x00, 0x00, 0x00, 0x60, 
	0x00, 0x18, 0x66, 0xff, 0x06, 0x36, 0x38, 0x18, 0x38, 0x1c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x30, 
	0x00, 0x18, 0x66, 0x66, 0x3c, 0x18, 0x1c, 0x18, 0x18, 0x18, 0xff, 0x7e, 0x00, 0x7e, 0x00, 0x18, 
	0x00, 0x18, 0x00, 0x66, 0x60, 0x0c, 0xf6, 0x00, 0x18, 0x18, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x0c, 
	0x00, 0x00, 0x00, 0xff, 0x3e, 0x66, 0x66, 0x00, 0x38, 0x1c, 0x66, 0x18, 0x18, 0x00, 0x18, 0x06, 
	0x00, 0x18, 0x00, 0x66, 0x18, 0x62, 0xdc, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x18, 0x00, 0x18, 0x02, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 
	0x3c, 0x18, 0x3c, 0x7e, 0x30, 0x7e, 0x3c, 0x7e, 0x3c, 0x3c, 0x00, 0x00, 0x30, 0x00, 0x0c, 0x3c, 
	0x66, 0x1c, 0x66, 0x30, 0x38, 0x06, 0x06, 0x60, 0x66, 0x66, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x66, 
	0x76, 0x18, 0x30, 0x18, 0x3c, 0x3e, 0x3e, 0x30, 0x3c, 0x7c, 0x18, 0x18, 0x0c, 0x00, 0x30, 0x30, 
	0x6e, 0x18, 0x18, 0x30, 0x36, 0x60, 0x66, 0x18, 0x66, 0x60, 0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 
	0x66, 0x18, 0x0c, 0x66, 0x7e, 0x66, 0x66, 0x0c, 0x66, 0x30, 0x18, 0x18, 0x30, 0x7e, 0x0c, 0x00, 
	0x3c, 0x7e, 0x7e, 0x3c, 0x30, 0x3c, 0x3c, 0x0c, 0x3c, 0x1c, 0x18, 0x18, 0x60, 0x00, 0x06, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x18, 0x3e, 0x3c, 0x1e, 0x7e, 0x7e, 0x7c, 0x66, 0x7e, 0x70, 0x66, 0x06, 0xc6, 0x66, 0x3c, 
	0x66, 0x3c, 0x66, 0x66, 0x36, 0x06, 0x06, 0x06, 0x66, 0x18, 0x60, 0x36, 0x06, 0xee, 0x6e, 0x66, 
	0x76, 0x66, 0x3e, 0x06, 0x66, 0x3e, 0x3e, 0x06, 0x7e, 0x18, 0x60, 0x1e, 0x06, 0xfe, 0x7e, 0x66, 
	0x76, 0x66, 0x66, 0x06, 0x66, 0x06, 0x06, 0x76, 0x66, 0x18, 0x60, 0x1e, 0x06, 0xd6, 0x7e, 0x66, 
	0x06, 0x7e, 0x66, 0x66, 0x36, 0x06, 0x06, 0x66, 0x66, 0x18, 0x66, 0x36, 0x06, 0xc6, 0x76, 0x66, 
	0x7c, 0x66, 0x3e, 0x3c, 0x1e, 0x7e, 0x06, 0x7c, 0x66, 0x7e, 0x3c, 0x66, 0x7e, 0xc6, 0x66, 0x3c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3e, 0x3c, 0x3e, 0x3c, 0x7e, 0x66, 0x66, 0xc6, 0x66, 0x66, 0x7e, 0x78, 0x02, 0x1e, 0x10, 0x00, 
	0x66, 0x66, 0x66, 0x06, 0x18, 0x66, 0x66, 0xc6, 0x66, 0x66, 0x30, 0x18, 0x06, 0x18, 0x38, 0x00, 
	0x66, 0x66, 0x66, 0x3c, 0x18, 0x66, 0x66, 0xd6, 0x3c, 0x3c, 0x18, 0x18, 0x0c, 0x18, 0x6c, 0x00, 
	0x3e, 0x66, 0x3e, 0x60, 0x18, 0x66, 0x66, 0xfe, 0x3c, 0x18, 0x0c, 0x18, 0x18, 0x18, 0xc6, 0x00, 
	0x06, 0x36, 0x36, 0x60, 0x18, 0x66, 0x3c, 0xee, 0x66, 0x18, 0x06, 0x18, 0x30, 0x18, 0x00, 0x00, 
	0x06, 0x6c, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0xc6, 0x66, 0x18, 0x7e, 0x78, 0x60, 0x1e, 0x00, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x00, 0x06, 0x00, 0x60, 0x00, 0x70, 0x00, 0x06, 0x18, 0x60, 0x06, 0x1c, 0x00, 0x00, 0x00, 
	0x3c, 0x3c, 0x06, 0x3c, 0x60, 0x3c, 0x18, 0x7c, 0x06, 0x00, 0x00, 0x06, 0x18, 0x66, 0x3e, 0x3c, 
	0x7e, 0x60, 0x3e, 0x06, 0x7c, 0x66, 0x7c, 0x66, 0x3e, 0x1c, 0x60, 0x36, 0x18, 0xfe, 0x66, 0x66, 
	0x7e, 0x7c, 0x66, 0x06, 0x66, 0x7e, 0x18, 0x66, 0x66, 0x18, 0x60, 0x1e, 0x18, 0xfe, 0x66, 0x66, 
	0x3c, 0x66, 0x66, 0x06, 0x66, 0x06, 0x18, 0x7c, 0x66, 0x18, 0x60, 0x36, 0x18, 0xd6, 0x66, 0x66, 
	0x18, 0x7c, 0x3e, 0x3c, 0x7c, 0x3c, 0x18, 0x60, 0x66, 0x3c, 0x60, 0x66, 0x3c, 0xc6, 0x66, 0x3c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x10, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x18, 0x1e, 0x18, 0x18, 
	0x3e, 0x7c, 0x3e, 0x7c, 0x7e, 0x66, 0x66, 0xc6, 0x66, 0x66, 0x7e, 0x18, 0x18, 0x18, 0x1c, 0x38, 
	0x66, 0x66, 0x66, 0x06, 0x18, 0x66, 0x66, 0xd6, 0x3c, 0x66, 0x30, 0x1c, 0x18, 0x38, 0x1e, 0x78, 
	0x66, 0x66, 0x06, 0x3c, 0x18, 0x66, 0x66, 0xfe, 0x18, 0x66, 0x18, 0x1c, 0x18, 0x38, 0x1c, 0x38, 
	0x3e, 0x7c, 0x06, 0x60, 0x18, 0x66, 0x3c, 0x7c, 0x3c, 0x7c, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x06, 0x60, 0x06, 0x3e, 0x70, 0x7c, 0x18, 0x6c, 0x66, 0x30, 0x7e, 0x78, 0x18, 0x1e, 0x10, 0x08, 
	0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
};

void CreateDefaultFont()
{
	// generate a texture handle
	glGenTextures(1, &sDefaultFontHandle);

	// register the handle
	Database::texture.Put(aDefaultFontId, sDefaultFontHandle);

	// get a texture template
	TextureTemplate &texture = Database::texturetemplate.Open(sDefaultFontHandle);

	// fill in values
	texture.mInternalFormat = GL_ALPHA8;
	texture.mWidth = aTextureWidth;
	texture.mHeight = aTextureHeight;
	texture.mFormat = GL_ALPHA;
	texture.mMinFilter = GL_NEAREST;
	texture.mMagFilter = GL_NEAREST;
	texture.mWrapS = GL_CLAMP;
	texture.mWrapT = GL_CLAMP;

	// allocate space
	texture.Allocate(aTextureComponents);

	// unpack font data
	const unsigned char * src = aTextureData;
	unsigned char * dst = texture.mPixels;
	for (unsigned int i = 0; i < sizeof(aTextureData); ++i)
	{
		register unsigned char s = *src++;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1); s >>= 1;
		*dst++ = -(s & 1);
	}

	// bind the texture
	BindTexture(sDefaultFontHandle, texture);

	// done with texture template
	Database::texturetemplate.Close(sDefaultFontHandle);

	// generate texture coordinates
	const int aCharacterWidth = 8;
	const int aCharacterHeight = 8;
	const int aCharacterPerRow = aTextureWidth / aCharacterWidth;
	for (int c = 0; c < LAST_CHARACTER-FIRST_CHARACTER+1; ++c)
	{
		Rect<float> &uv = sDefaultFontUVs[c];
		int row = c / aCharacterPerRow;
		int col = c - row * aCharacterPerRow;
		uv.x = float(col * aCharacterWidth) / float(aTextureWidth);
		uv.y = float((row + 1) * aCharacterHeight) / float(aTextureHeight);
		uv.w = float(aCharacterWidth) / float(aTextureWidth);
		uv.h = float(-aCharacterHeight) / float(aTextureHeight);
	}
}

int FontGetWidth(GLuint handle, int c)
{
	// TO DO: read from font info
	return 8;
}

int FontGetHeight(GLuint handle)
{
	// TO DO: read from font info
	return 8;
}

void FontDrawBegin(GLuint handle)
{
    glPushAttrib(GL_TEXTURE_BIT);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, handle);
	glTexEnvi( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE );

    glBegin(GL_QUADS);
}

void FontDrawEnd()
{
	glEnd();

    glPopAttrib();
}

void FontDrawCharacter(int c, float x, float y, float w, float h, float z)
{
	// texture coordinates
	const Rect<float> &uv = sDefaultFontUVs[c - FIRST_CHARACTER];

	// submit vertex data
    glTexCoord2f(uv.x,        uv.y       ); glVertex3f(x,     y,     z);
    glTexCoord2f(uv.x + uv.w, uv.y       ); glVertex3f(x + w, y,     z);
    glTexCoord2f(uv.x + uv.w, uv.y + uv.h); glVertex3f(x + w, y + h, z);
    glTexCoord2f(uv.x,        uv.y + uv.h); glVertex3f(x,     y + h, z);
}

void FontDrawString(const char *s, float x, float y, float w, float h, float z, float wrap)
{
	float x0 = x;

    while (*s)
    {
		if (x + w >= wrap)
		{
			x = x0;
			y += h;
		}

        FontDrawCharacter(*s, x, y, w, h, z);
        s++;
        x += w;
    }
}
